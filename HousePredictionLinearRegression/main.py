# -*- coding: utf-8 -*-
"""NeuralNetworksHousePriceRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNfG2RPV46aUTfEgLFzJSoR4IlaOnAzB
"""

# Original Date: April 2022
# Modify Date: Aug 2025

import pandas as pd
import matplotlib.pyplot as plt
from keras import Sequential
from keras.layers import Dense
from sklearn.preprocessing import StandardScaler
from keras.datasets import boston_housing

# load dataset and split into training and testing data
# Dataset Info: https://www.cs.toronto.edu/~delve/data/boston/bostonDetail.html
(x_train, y_train), (x_test, y_test) = boston_housing.load_data()

# normalize data
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# Regression model with a neural network
model = Sequential()
model.add(Dense(8, input_dim=13, activation='relu')) #input_dim = size of feature vector
model.add(Dense(16, activation='relu'))
model.add(Dense(1))

# mse = mean squared error, mae = mean absolute error
model.compile(optimizer= 'rmsprop', loss='mse',  metrics=['mae'])

# split into validation and training data and train model
history = model.fit(x_train, y_train, epochs = 100)

# plot mean absolute error of training data
plt.plot(history.history['mae'])
plt.xlabel('epoch')
plt.ylabel('mae')
plt.savefig('maehistoryplot.png')
plt.show()

# first value is mse (average error)
# second value is mae (median error)
model.evaluate(x_test, y_test)

# plot predictions and actual values of test data
y_pred = model.predict(x_test).flatten()
plt.scatter(y_test, y_pred)
plt.xlabel('True Values [MEDV]')
plt.ylabel('Predictions [MEDV]')
lims = [0, 50]
plt.plot(lims, lims)
plt.savefig('regressionplot.png')
plt.show()
